<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace paddle\Paddle;

class Discounts 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Create a discount
     * 
     * Creates a new discount.
     * 
     * If successful, your response includes a copy of the new discount entity.
     * 
     * @param \paddle\Paddle\Models\Shared\DiscountCreate $request
     * @return \paddle\Paddle\Models\Operations\CreateDiscountResponse
     */
	public function create(
        ?\paddle\Paddle\Models\Shared\DiscountCreate $request,
    ): \paddle\Paddle\Models\Operations\CreateDiscountResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/discounts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \paddle\Paddle\Models\Operations\CreateDiscountResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'paddle\Paddle\Models\Operations\CreateDiscountResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a discount
     * 
     * Returns a discount using its ID.
     * 
     * @param \paddle\Paddle\Models\Operations\GetDiscountRequest $request
     * @return \paddle\Paddle\Models\Operations\GetDiscountResponse
     */
	public function get(
        ?\paddle\Paddle\Models\Operations\GetDiscountRequest $request,
    ): \paddle\Paddle\Models\Operations\GetDiscountResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/discounts/{discount_id}', \paddle\Paddle\Models\Operations\GetDiscountRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \paddle\Paddle\Models\Operations\GetDiscountResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->twoHundredApplicationJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'paddle\Paddle\Models\Operations\GetDiscountResponseBody', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndFourApplicationJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'paddle\Paddle\Models\Operations\GetDiscountDiscountsResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List discounts
     * 
     * Returns a paginated list of discounts. Use the query parameters to page through results.
     * 
     * By default, Paddle returns discounts that are `active`. Use the `status` query parameter to return discounts that are archived or expired.
     * 
     * @param \paddle\Paddle\Models\Operations\ListDiscountsRequest $request
     * @return \paddle\Paddle\Models\Operations\ListDiscountsResponse
     */
	public function list(
        ?\paddle\Paddle\Models\Operations\ListDiscountsRequest $request,
    ): \paddle\Paddle\Models\Operations\ListDiscountsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/discounts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\paddle\Paddle\Models\Operations\ListDiscountsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \paddle\Paddle\Models\Operations\ListDiscountsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'paddle\Paddle\Models\Operations\ListDiscountsResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a discount
     * 
     * Updates a discount using its ID.
     * 
     * If successful, your response includes a copy of the updated discount entity.
     * 
     * @param \paddle\Paddle\Models\Operations\UpdateDiscountRequest $request
     * @return \paddle\Paddle\Models\Operations\UpdateDiscountResponse
     */
	public function update(
        ?\paddle\Paddle\Models\Operations\UpdateDiscountRequest $request,
    ): \paddle\Paddle\Models\Operations\UpdateDiscountResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/discounts/{discount_id}', \paddle\Paddle\Models\Operations\UpdateDiscountRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "discount", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \paddle\Paddle\Models\Operations\UpdateDiscountResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->twoHundredApplicationJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'paddle\Paddle\Models\Operations\UpdateDiscountResponseBody', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndFourApplicationJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'paddle\Paddle\Models\Operations\UpdateDiscountDiscountsResponseBody', 'json');
            }
        }

        return $response;
    }
}