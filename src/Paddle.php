<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace paddle\Paddle;

/**
 * Paddle - v1: Paddle API: REST API for interfacing with Paddle.
 * 
 * The Paddle API lets you create, read, update, and delete information in your Paddle system. Use the Paddle API to integrate Paddle with your app or third-party solutions. See https://developer.paddle.com/ to learn more.
 * https://developer.paddle.com/ - Paddle Developer Center
 * 
 * @package paddle\Paddle
 * @access public
 * @see https://developer.paddle.com/
 */
class Paddle
{
	public const SERVERS = [
        /** Production */
		'https://api.paddle.com',
        /** Sandbox */
		'https://sandbox-api.paddle.com',
	];
  	
    /**
     * Work with adjustments.
     * 
     * @var Adjustments $$adjustments
     */
	public Adjustments $adjustments;
	
    /**
     * Work with customers.
     * 
     * @var Customers $$customers
     */
	public Customers $customers;
	
    /**
     * Work with addresses for a customer.
     * 
     * @var Addresses $$addresses
     */
	public Addresses $addresses;
	
    /**
     * Work with businesses for a customer.
     * 
     * @var Businesses $$businesses
     */
	public Businesses $businesses;
	
    /**
     * Work with discounts.
     * 
     * @var Discounts $$discounts
     */
	public Discounts $discounts;
	
    /**
     * Work with events and the event stream.
     * 
     * @var Events $$events
     */
	public Events $events;
	
    /**
     * Work with invoices.
     * 
     * @var Invoices $$invoices
     */
	public Invoices $invoices;
	
    /**
     * Get Paddle IP addresses.
     * 
     * @var IPAddresses $$ipAddresses
     */
	public IPAddresses $ipAddresses;
	
    /**
     * Work with notifications and notification settings.
     * 
     * @var Notifications $$notifications
     */
	public Notifications $notifications;
	
    /**
     * Work with prices.
     * 
     * @var Prices $$prices
     */
	public Prices $prices;
	
    /**
     * Work with transactions.
     * 
     * @var Transactions $$transactions
     */
	public Transactions $transactions;
	
	public TransactionService $transactionService;
	
    /**
     * Work with products.
     * 
     * @var Products $$products
     */
	public Products $products;
	
    /**
     * Work with subscriptions.
     * 
     * @var Subscriptions $$subscriptions
     */
	public Subscriptions $subscriptions;
		
	private SDKConfiguration $sdkConfiguration;

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return PaddleBuilder
	 */
	public static function builder(): PaddleBuilder
	{
		return new PaddleBuilder();
	}

	/**
	 * @param SDKConfiguration $sdkConfiguration
	 */
	public function __construct(SDKConfiguration $sdkConfiguration)
	{
		$this->sdkConfiguration = $sdkConfiguration;
		
		$this->adjustments = new Adjustments($this->sdkConfiguration);
		
		$this->customers = new Customers($this->sdkConfiguration);
		
		$this->addresses = new Addresses($this->sdkConfiguration);
		
		$this->businesses = new Businesses($this->sdkConfiguration);
		
		$this->discounts = new Discounts($this->sdkConfiguration);
		
		$this->events = new Events($this->sdkConfiguration);
		
		$this->invoices = new Invoices($this->sdkConfiguration);
		
		$this->ipAddresses = new IPAddresses($this->sdkConfiguration);
		
		$this->notifications = new Notifications($this->sdkConfiguration);
		
		$this->prices = new Prices($this->sdkConfiguration);
		
		$this->transactions = new Transactions($this->sdkConfiguration);
		
		$this->transactionService = new TransactionService($this->sdkConfiguration);
		
		$this->products = new Products($this->sdkConfiguration);
		
		$this->subscriptions = new Subscriptions($this->sdkConfiguration);
	}
}