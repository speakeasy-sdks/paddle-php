<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace paddle\Paddle\Models\Shared;


/**
 * Notification - Represents a notification entity.
 * 
 * @package paddle\Paddle\Models\Shared
 * @access public
 */
class Notification
{
    /**
     * RFC 3339 datetime string.
     * 
     * @var ?\DateTime $deliveredAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('delivered_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $deliveredAt = null;
    
    /**
     * Unique Paddle ID for this notification, prefixed with `ntf_`.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * RFC 3339 datetime string.
     * 
     * @var ?\DateTime $lastAttemptAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('last_attempt_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $lastAttemptAt = null;
    
    /**
     * Unique Paddle ID for this notification setting, prefixed with `ntfset_`.
     * 
     * @var ?string $notificationSettingId
     */
	#[\JMS\Serializer\Annotation\SerializedName('notification_setting_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $notificationSettingId = null;
    
    /**
     * RFC 3339 datetime string.
     * 
     * @var ?\DateTime $occurredAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('occurred_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $occurredAt = null;
    
    /**
     * Describes how this notification was created.
     * 
     * @var ?\paddle\Paddle\Models\Shared\NotificationOrigin $origin
     */
	#[\JMS\Serializer\Annotation\SerializedName('origin')]
    #[\JMS\Serializer\Annotation\Type('enum<paddle\Paddle\Models\Shared\NotificationOrigin>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NotificationOrigin $origin = null;
    
    /**
     * Represents an event entity.
     * 
     * @var ?\paddle\Paddle\Models\Shared\Event $payload
     */
	#[\JMS\Serializer\Annotation\SerializedName('payload')]
    #[\JMS\Serializer\Annotation\Type('paddle\Paddle\Models\Shared\Event')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Event $payload = null;
    
    /**
     * RFC 3339 datetime string.
     * 
     * @var ?\DateTime $replayedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('replayed_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $replayedAt = null;
    
    /**
     * RFC 3339 datetime string.
     * 
     * @var ?\DateTime $retryAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('retry_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $retryAt = null;
    
    /**
     * Status of this notification.
     * 
     * @var ?\paddle\Paddle\Models\Shared\SchemasstatusNotification $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<paddle\Paddle\Models\Shared\SchemasstatusNotification>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SchemasstatusNotification $status = null;
    
    /**
     * How many times delivery of this notification has been attempted. Automatically incremented by Paddle after an attempt.
     * 
     * @var ?int $timesAttempted
     */
	#[\JMS\Serializer\Annotation\SerializedName('times_attempted')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $timesAttempted = null;
    
    /**
     * Type of event sent by Paddle, in the format `entity.event_type`.
     * 
     * @var ?string $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $type = null;
    
	public function __construct()
	{
		$this->deliveredAt = null;
		$this->id = null;
		$this->lastAttemptAt = null;
		$this->notificationSettingId = null;
		$this->occurredAt = null;
		$this->origin = null;
		$this->payload = null;
		$this->replayedAt = null;
		$this->retryAt = null;
		$this->status = null;
		$this->timesAttempted = null;
		$this->type = null;
	}
}
