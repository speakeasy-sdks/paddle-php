<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace paddle\Paddle\Models\Shared;


/**
 * Pagination2 - Keys used for working with paginated results.
 * 
 * @package paddle\Paddle\Models\Shared
 * @access public
 */
class Pagination2
{
    /**
     * Estimated number of entities for this response.
     * 
     * @var int $estimatedTotal
     */
	#[\JMS\Serializer\Annotation\SerializedName('estimated_total')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $estimatedTotal;
    
    /**
     * Whether this response has another page.
     * 
     * @var bool $hasMore
     */
	#[\JMS\Serializer\Annotation\SerializedName('has_more')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $hasMore;
    
    /**
     * URL containing the query parameters of the original request, along with the `after` parameter that marks the starting point of the next page. Always returned, even if `has_more` is `false`.
     * 
     * @var string $next
     */
	#[\JMS\Serializer\Annotation\SerializedName('next')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $next;
    
    /**
     * Number of entities per page for this response. May differ from the number requested if the requested number is too high.
     * 
     * @var ?int $perPage
     */
	#[\JMS\Serializer\Annotation\SerializedName('per_page')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $perPage = null;
    
	public function __construct()
	{
		$this->estimatedTotal = 0;
		$this->hasMore = false;
		$this->next = "";
		$this->perPage = null;
	}
}
