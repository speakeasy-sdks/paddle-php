<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace paddle\Paddle\Models\Shared;


/**
 * TransactionDetails - Calculated totals for a transaction, including proration, discounts, tax, and currency conversion. Considered the source of truth for totals on a transaction.
 * 
 * @package paddle\Paddle\Models\Shared
 * @access public
 */
class TransactionDetails
{
    /**
     * Breakdown of the payout total for a transaction after adjustments. `null` until the transaction is `completed`.
     * 
     * @var ?\paddle\Paddle\Models\Shared\TransactionPayoutTotalsAdjusted $adjustedPayoutTotals
     */
	#[\JMS\Serializer\Annotation\SerializedName('adjusted_payout_totals')]
    #[\JMS\Serializer\Annotation\Type('paddle\Paddle\Models\Shared\TransactionPayoutTotalsAdjusted')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TransactionPayoutTotalsAdjusted $adjustedPayoutTotals = null;
    
    /**
     * Breakdown of the payout totals for a transaction after adjustments. `null` until the transaction is `completed`.
     * 
     * @var ?\paddle\Paddle\Models\Shared\TransactionTotalsAdjusted $adjustedTotals
     */
	#[\JMS\Serializer\Annotation\SerializedName('adjusted_totals')]
    #[\JMS\Serializer\Annotation\Type('paddle\Paddle\Models\Shared\TransactionTotalsAdjusted')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TransactionTotalsAdjusted $adjustedTotals = null;
    
    /**
     * Information about line items for this transaction. Different from transaction `items` as they include totals calculated by Paddle. Considered the source of truth for line item totals.
     * 
     * @var ?array<\paddle\Paddle\Models\Shared\TransactionLineItem> $lineItems
     */
	#[\JMS\Serializer\Annotation\SerializedName('line_items')]
    #[\JMS\Serializer\Annotation\Type('array<paddle\Paddle\Models\Shared\TransactionLineItem>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $lineItems = null;
    
    /**
     * Breakdown of the payout total for a transaction. `null` until the transaction is `completed`. Returned in your payout currency.
     * 
     * @var ?\paddle\Paddle\Models\Shared\TransactionPayoutTotals $payoutTotals
     */
	#[\JMS\Serializer\Annotation\SerializedName('payout_totals')]
    #[\JMS\Serializer\Annotation\Type('paddle\Paddle\Models\Shared\TransactionPayoutTotals')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TransactionPayoutTotals $payoutTotals = null;
    
    /**
     * List of tax rates applied for this transaction.
     * 
     * @var ?array<\paddle\Paddle\Models\Shared\TransactionDetailsTaxRatesUsed> $taxRatesUsed
     */
	#[\JMS\Serializer\Annotation\SerializedName('tax_rates_used')]
    #[\JMS\Serializer\Annotation\Type('array<paddle\Paddle\Models\Shared\TransactionDetailsTaxRatesUsed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $taxRatesUsed = null;
    
    /**
     * Breakdown of the total for a transaction.
     * 
     * @var ?\paddle\Paddle\Models\Shared\TransactionTotals $totals
     */
	#[\JMS\Serializer\Annotation\SerializedName('totals')]
    #[\JMS\Serializer\Annotation\Type('paddle\Paddle\Models\Shared\TransactionTotals')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TransactionTotals $totals = null;
    
	public function __construct()
	{
		$this->adjustedPayoutTotals = null;
		$this->adjustedTotals = null;
		$this->lineItems = null;
		$this->payoutTotals = null;
		$this->taxRatesUsed = null;
		$this->totals = null;
	}
}
